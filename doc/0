using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WINUserControl
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            backgroundWorker1 = new BackgroundWorker();
            backgroundWorker1.WorkerReportsProgress = true;//能否报告进度更新。 
            backgroundWorker1.WorkerSupportsCancellation = true;//是否支持异步取消 
                                                                //绑定事件 
            backgroundWorker1.DoWork += new DoWorkEventHandler(backgroundWorker1_DoWork);
            backgroundWorker1.ProgressChanged += new ProgressChangedEventHandler(backgroundWorker1_ProgressChanged);
            backgroundWorker1.RunWorkerCompleted += new RunWorkerCompletedEventHandler(backgroundWorker1_RunWorkerCompleted);
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            MapControl mapControl = new MapControl();
            this.flowLayoutPanel1.Controls.Add(mapControl);
        }

        private void btnShow_Click(object sender, EventArgs e)
        {
            int index = Int32.Parse(this.txtIndex.Text)-1;
            MapControl mapControl=   this.flowLayoutPanel1.Controls[index] as MapControl;
        }

        private void btnDel_Click(object sender, EventArgs e)
        {
            try
            {
                int index = Int32.Parse(this.txtIndex.Text) - 1;
                this.flowLayoutPanel1.Controls.RemoveAt(index);
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        BackgroundWorker backgroundWorker1 = null;
        private void btnCount_Click(object sender, EventArgs e)
        {
            //MessageBox.Show(""+this.flowLayoutPanel1.Controls.Count);
            //string str = this.flowLayoutPanel1.Controls[0].Name;
            //Thread.Sleep(10*1000);
           
           
        }

        private void backgroundWorker1_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            //e.Cancelled指示异步操作是否已被取消 
            //e.Error 指示异步操作期间发生的错误 
            //e.Result 获取异步操作结果的值,即DoWork事件中，Result设置的值。 
            if (e.Cancelled == true)
            {
                resultLabel.Text = "Canceled!";
            }
            else if (e.Error != null)
            {
                resultLabel.Text = "Error: " + e.Error.Message;
            }
            else
            {
                resultLabel.Text = e.Result.ToString();
            }
        }

        private void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            //e.ProgressPercentage 获取异步操作进度的百分比 
            resultLabel.Text = (e.ProgressPercentage.ToString() + "%");
            string state = (string)e.UserState;//接收ReportProgress方法传递过来的userState 
        }

        private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
        {
            this.Invoke(new Action(delegate ()
            {
                this.btnCount.Text = "1111111";
            }));

            //句柄sender指向的就是该BackgroundWorker。 

            //e.Argument 获取异步操作参数的值 
            //e.Cancel 是否应该取消事件 
            //e.Result 获取或设置异步操作结果的值(在RunWorkerCompleted事件可能会使用到) 
            object a = e.Argument;//获取RunWorkerAsync(object argument)传入的值 
            BackgroundWorker worker = sender as BackgroundWorker;

            for (int i = 1; i <= 10; i++)
            {
                if (worker.CancellationPending == true)//在耗时操作中判断CancellationPending属性，如果为false则退出 
                {
                    e.Cancel = true;
                    break;
                }
                else
                {
                    // Perform a time consuming operation and report progress. 
                    System.Threading.Thread.Sleep(500);
                    worker.ReportProgress(i * 10, "Object userState");// 将触发BackgroundWorker.ProgressChanged事件，向ProgressChanged报告进度 
                }
            }
            e.Result = "结束";
        }

        private void flowLayoutPanel1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void btnStart_Click(object sender, EventArgs e)
        {
            if (backgroundWorker1.IsBusy != true)//判断BackgroundWorker 是否正在运行异步操作。 
            {
                // Start the asynchronous operation. 
                backgroundWorker1.RunWorkerAsync("object argument");//启动异步操作，有两种重载。将触发BackgroundWorker.DoWork事件 
            }
        }

        private void btnEnd_Click(object sender, EventArgs e)
        {
            if (backgroundWorker1.WorkerSupportsCancellation == true)
            {
                // Cancfeihuanyule.comel the asynchronous operation. 
                backgroundWorker1.CancelAsync(); //请求取消挂起的后台操作。调用该方法将使BackgroundWorker.CancellationPending属性设置为True。 
            }
        }
    }
}
